---
- name: Deploy SonarQube using OpenShift Operator
  hosts: localhost
  gather_facts: no
  vars:
    cluster_admin: cluster-admin
    cluster_admin_pass: Password.54321
    cluster_api_url: https://api.e5n9l5l2t8z7q0d.qnbq.p3.openshiftapps.com:443
    devops_namespace: devops
    sonarqube_channel: "alpha"  # Adjust this based on available channels
    github_client_id: Ov23liSuUqmknk1PiZO5
    github_client_secret: 8906a0f76e0a81ffeafbc35b419ce3d54cfc5cee

  tasks:
    - name: Create Auth Token for OpenShift API
      kubernetes.core.k8s_auth:
        username: "{{ cluster_admin }}"
        password: "{{ cluster_admin_pass }}"
        host: "{{ cluster_api_url }}"
        validate_certs: true 
      register: k8s_auth_results

    - name: Retrieve cluster domain
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: config.openshift.io/v1
        kind: Ingress
        name: cluster
      register: ingress_info

    - name: Set cluster domain fact
      set_fact:
        cluster_domain: "{{ ingress_info.resources[0].spec.domain }}"

    - name: Generate SonarQube URL
      ansible.builtin.set_fact:
        sonarqube_url: "https://sonarqube-{{ devops_namespace }}.{{ cluster_domain }}"

    - name: Display SonarQube URL
      ansible.builtin.debug:
        msg: "SonarQube URL: {{ sonarqube_url }}"

    - name: Display GitHub OAuth Callback URL
      debug:
        msg: "Set the GitHub OAuth Callback URL to: {{ sonarqube_url }}/oauth2/callback/github"

    - name: Create or ensure devops namespace
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ devops_namespace }}"

    - name: Create GitHub OAuth secret
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: github-oauth-secret
            namespace: "{{ devops_namespace }}"
          type: Opaque
          stringData:
            client-id: "{{ github_client_id }}"
            client-secret: "{{ github_client_secret }}"

    - name: Create OperatorGroup for EDP Sonar Operator
      kubernetes:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: edp-sonar-operatorgroup
            namespace: "{{ devops_namespace }}"
          spec:
            targetNamespaces:
              - "{{ devops_namespace }}"

    - name: Create EDP Sonar Operator Subscription
      kubernetes:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: edp-sonar-operator
            namespace: "{{ devops_namespace }}"
          spec:
            channel: "alpha"
            name: edp-sonar-operator
            source: community-operators
            sourceNamespace: openshift-marketplace
            installPlanApproval: Automatic

    - name: Wait for EDP Sonar Operator to be ready
      kubernetes:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        name: "edp-sonar-operator.v{{ edp_sonar_operator_version }}"
        namespace: "{{ devops_namespace }}"
      register: csv_status
      until: csv_status.result.status.phase == 'Succeeded'
      retries: 15
      delay: 60

    - name: Display CSV status
      debug:
        var: csv_status

    - name: Deploy Sonar instance
      kubernetes:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: v2.edp.epam.com/v1
          kind: Sonar
          metadata:
            name: sonar
            namespace: "{{ devops_namespace }}"
          spec:
            type: Sonar
            version: "9.9.0"
            basePath: "/"
            imagePullSecrets: []
            ingress:
              enabled: true
              host: "sonarqube-{{ devops_namespace }}.{{ cluster_domain }}"
            storage:
              class: "gp2"
              size: 1Gi
            database:
              externalDb:
                enabled: false
            githubAuth:
              enabled: true
              clientId: "{{ github_client_id }}"
              clientSecret: "{{ github_client_secret }}"
              organizations: "{{ github_organizations | default([]) }}"