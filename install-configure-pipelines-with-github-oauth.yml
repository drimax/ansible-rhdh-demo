---
- name: Install and Configure OpenShift Pipelines (Tekton)
  hosts: localhost
  gather_facts: no
  vars:
    openshift_pipelines_channel: "{{ pipelines_channel }}"
    openshift_pipelines_version: "1.15.1"  # Adjust this to the version you want
    namespace: "openshift-pipelines"
    cluster_admin: cluster-admin
    cluster_admin_pass: Password.54321
    cluster_api_url: https://api.e5n9l5l2t8z7q0d.qnbq.p3.openshiftapps.com:443

  tasks:
    - name: Create Auth Token for Openshift API
      kubernetes.core.k8s_auth:
        username: "{{ cluster_admin }}"
        password: "{{ cluster_admin_pass }}"
        host: "{{ cluster_api_url }}"
        validate_certs: true 
      register: k8s_auth_results

    - name: Get available channels for OpenShift Pipelines Operator
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: packages.operators.coreos.com/v1
        kind: PackageManifest
        name: openshift-pipelines-operator-rh
        namespace: openshift-marketplace
      register: package_manifest

    - name: Display available channels
      debug:
        msg: "Available channels: {{ package_manifest.resources[0].status.channels | map(attribute='name') | list }}"

    - name: Set OpenShift Pipelines Operator channel
      set_fact:
        pipelines_channel: "{{ package_manifest.resources[0].status.channels | map(attribute='name') | sort | last }}"

    - name: Display selected channel
      debug:
        msg: "Selected channel for OpenShift Pipelines Operator: {{ pipelines_channel }}"

    - name: Ensure OpenShift Pipelines Operator is installed
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: openshift-pipelines-operator-rh
            namespace: openshift-operators
          spec:
            channel: "{{ pipelines_channel }}"
            name: openshift-pipelines-operator-rh
            source: redhat-operators
            sourceNamespace: openshift-marketplace

    - name: Wait for OpenShift Pipelines Operator to be ready
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        namespace: openshift-operators
        label_selectors:
          - "operators.coreos.com/openshift-pipelines-operator-rh.openshift-operators"
      register: csv_status
      until: 
        - csv_status.resources is defined
        - csv_status.resources | length > 0
        - csv_status.resources[0].status.phase == "Succeeded"
      retries: 15
      delay: 30

    - name: Display OpenShift Pipelines Operator status
      debug:
        msg: "OpenShift Pipelines Operator is now {{ csv_status.resources[0].status.phase }}"

    - name: Wait for tekton-operator-proxy-webhook service
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: v1
        kind: Service
        namespace: openshift-pipelines
        name: tekton-operator-proxy-webhook
      register: webhook_service
      until: webhook_service.resources | length > 0
      retries: 10
      delay: 30

    - name: Display tekton-operator-proxy-webhook service status
      debug:
        msg: "tekton-operator-proxy-webhook service is now {{ 'available' if webhook_service.resources else 'not available' }}"

    - name: Create the openshift-pipelines namespace
      kubernetes.core.k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: v1
        kind: Namespace
        name: "{{ namespace }}"
        state: present
      register: namespace_created

    - name: Create OperatorGroup for OpenShift Pipelines
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            name: openshift-pipelines-operatorgroup
            namespace: "{{ namespace }}"
          spec: {}
      when: namespace_created is succeeded

    - name: Create Subscription for OpenShift Pipelines Operator
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: openshift-pipelines-operator
            namespace: "{{ namespace }}"
          spec:
            channel: "{{ openshift_pipelines_channel }}"
            name: openshift-pipelines-operator-rh
            source: redhat-operators
            sourceNamespace: openshift-marketplace
            installPlanApproval: Automatic

    - name: Wait for OpenShift Pipelines Operator to be installed
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        name: "openshift-pipelines-operator-rh.v{{ openshift_pipelines_version }}"
        namespace: "{{ namespace }}"
      register: csv_status
      until: csv_status.resources[0].status.phase == "Succeeded"
      retries: 10
      delay: 30

    - name: Verify OpenShift Pipelines Operator installation
      debug:
        msg: "OpenShift Pipelines Operator has been successfully installed"
      when: csv_status.resources[0].status.phase == "Succeeded"

    - name: Check OpenShift Pipelines Operator status
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: operators.coreos.com/v1alpha1
        kind: ClusterServiceVersion
        namespace: openshift-operators
        label_selectors:
          - "operators.coreos.com/openshift-pipelines-operator-rh.openshift-operators"
      register: operator_status

    - name: Display OpenShift Pipelines Operator status
      debug:
        msg: "OpenShift Pipelines Operator status: {{ operator_status.resources[0].status.phase if operator_status.resources else 'Not found' }}"

    - name: Check for tekton-operator-proxy-webhook service
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: v1
        kind: Service
        namespace: openshift-pipelines
        name: tekton-operator-proxy-webhook
      register: webhook_service

    - name: Display tekton-operator-proxy-webhook service status
      debug:
        msg: "tekton-operator-proxy-webhook service: {{ 'Found' if webhook_service.resources else 'Not found' }}"

    - name: Wait for tekton-operator-proxy-webhook service
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: v1
        kind: Service
        namespace: openshift-pipelines
        name: tekton-operator-proxy-webhook
      register: webhook_service
      until: webhook_service.resources | length > 0
      retries: 10
      delay: 30

    - name: Display tekton-operator-proxy-webhook service status
      debug:
        msg: "tekton-operator-proxy-webhook service is now {{ 'available' if webhook_service.resources else 'not available' }}"

    - name: Create TektonConfig instance
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operator.tekton.dev/v1alpha1
          kind: TektonConfig
          metadata:
            name: config
          spec:
            profile: all
            targetNamespace: "{{ namespace }}"
            addon:
              params:
                - name: clusterTasks
                  value: "true"
                - name: pipelineTemplates
                  value: "true"
            pipeline:
              enable: true
            trigger:
              enable: true
            dashboard:
              readonly: false

    - name: Wait for TektonConfig to be ready
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: operator.tekton.dev/v1alpha1
        kind: TektonConfig
        name: config
      register: tekton_config_status
      until: tekton_config_status.resources[0].status.conditions[0].status == "True"
      retries: 10
      delay: 30

    - name: Verify TektonConfig creation
      debug:
        msg: "TektonConfig has been successfully created and is ready"
      when: tekton_config_status.resources[0].status.conditions[0].status == "True"

    - name: Wait for Tekton Dashboard deployment
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: apps/v1
        kind: Deployment
        name: tekton-dashboard
        namespace: "{{ namespace }}"
      register: dashboard_deployment
      until: 
        - dashboard_deployment.resources is defined
        - dashboard_deployment.resources | length > 0
        - dashboard_deployment.resources[0].status.availableReplicas is defined
        - dashboard_deployment.resources[0].status.availableReplicas > 0
      retries: 15
      delay: 30

    - name: Display Tekton Dashboard deployment status
      debug:
        msg: "Tekton Dashboard deployment status: {{ dashboard_deployment.resources[0].status if dashboard_deployment.resources else 'Not found' }}"

    - name: Expose Tekton Dashboard
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: tekton-dashboard
            namespace: "{{ namespace }}"
          spec:
            to:
              kind: Service
              name: tekton-dashboard
            tls:
              termination: edge
              insecureEdgeTerminationPolicy: Redirect

    - name: Get Tekton Dashboard URL
      k8s_info:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        api_version: route.openshift.io/v1
        kind: Route
        name: tekton-dashboard
        namespace: "{{ namespace }}"
      register: dashboard_route

    - name: Display Tekton Dashboard URL
      debug:
        msg: "Tekton Dashboard is accessible at: https://{{ dashboard_route.resources[0].spec.host }}"
      when: dashboard_route.resources | length > 0

    - name: Create TektonPipeline
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operator.tekton.dev/v1alpha1
          kind: TektonPipeline
          metadata:
            name: pipeline
          spec:
            targetNamespace: "{{ namespace }}"

    - name: Create TektonTrigger
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operator.tekton.dev/v1alpha1
          kind: TektonTrigger
          metadata:
            name: trigger
          spec:
            targetNamespace: "{{ namespace }}"

    - name: Create TektonDashboard
      k8s:
        host: "{{ cluster_api_url }}"
        api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
        definition:
          apiVersion: operator.tekton.dev/v1alpha1
          kind: TektonDashboard
          metadata:
            name: dashboard
          spec:
            targetNamespace: "{{ namespace }}"